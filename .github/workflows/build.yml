# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build Images

on: [push]

jobs:
  build-jar:
    name: 'Build JAR'
    runs-on: 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v2.4.0
    
    - name: 'Setup Java 17'
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    
    - name: 'Build JAR'
      run: 'mvn package -f pom.xml'
      
    - name: 'Set Version Number'
      run: echo "VERSION=$(mvn help:evaluate -Dexpression=''project.version'' -q -DforceStdout)" >> $GITHUB_ENV
      
    - name: 'Publish JAR'
      uses: actions/upload-artifact@v2.3.1
      with:
        name: 'load-${{env.VERSION}}.jar'
        path: 'target/*.jar'
      
    - name: 'Create Release'
      if: contains(github.event.head_commit.message, 'v')
      id: 'create_release'
      uses: ncipollo/release-action@v1
      with:
        bodyFile: 'releases/${{env.VERSION}}.md'
        tag: 'v${{env.VERSION}}'
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: 'target/*.jar'
        
    - name: 'Create'
      run: 'touch upload_url.txt'
    
    - name: 'Write Upload URL To File'
      if: contains(github.event.head_commit.message, 'v')
      run: echo '"${{steps.create_release.outputs.upload_url}}" > upload_url.txt'
    
    - name: 'ls'
      run: ls

    - name: 'Publish Upload URL'
      if: contains(github.event.head_commit.message, 'v')
      uses: actions/upload-artifact@v2.3.1
      with:
        name: 'upload_url.txt'
        path: 'upload_url.txt'
        
  build-macos-and-linux-image:
    name: 'Build MacOS and Linux Images'
    needs: [build-jar]
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-11']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
          - os: 'macos-latest'
            label: 'mac'
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - name: 'Setup GraalVM Environment'
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{secrets.GITHUB_TOKEN}}
      
      - name: 'Set Version Number'
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        
      - name: 'Get JAR'
        uses: actions/download-artifact@v2.1.0
        with:
          name: 'load-${{env.VERSION}}.jar'
      
      - name: 'Download URL'
        uses: actions/download-artifact@v2.1.0
        with:
          name: 'upload_url.txt'
          
      - name: 'Set Upload URL Env Var'
        if: contains(github.event.head_commit.message, 'v')
        run: echo 'UPLOAD_URL=$(cat upload_url.txt)' >> $GITHUB_ENV
        
      - name: 'Build Image'
        run: 'native-image --no-server --no-fallback -H:ReflectionConfigurationResources=reflection-config.json -jar load-${{env.VERSION}}.jar'
      
      - name: 'Upload Image'
        if: success()
        uses: actions/upload-artifact@v2.3.1
        with:
          name: 'load-${{env.VERSION}}-${{matrix.label}}_x64'
          path: 'load-${{env.VERSION}}'
          
      - name: 'Release Native Image Asset'
        if: success() && contains(github.event.head_commit.message, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'load-${{env.VERSION}}-${{matrix.label}}_x64'
          asset_path: 'load-${{env.VERSION}}'
          asset_content_type: application/octet-stream
  build-windows-image:
    needs: [build-jar]
    name: 'Build Windows Image'
    runs-on: windows-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v1
      - name: 'Download GraalVM'
        run: |
          Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.3.0/graalvm-ce-java17-windows-amd64-21.3.0.zip -OutFile 'graal.zip'
      - name: 'Install GraalVM'
        run: |
          Expand-Archive -path 'graal.zip' -destinationpath '.'
      - name: 'Install Native Image'
        run: |
          graalvm-ce-java17-21.3.0\bin\gu.cmd install native-image
      - name: 'Set up Visual C Build Tools Workload for Visual Studio 2012 Build Tools'
        run: |
          choco install visualstudio2022-workload-vctools
      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(mvn help:evaluate -Dexpression=''project.version'' -q -DforceStdout)" >> $GITHUB_ENV
        shell: bash
      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2.1.0
        with:
          name: 'load-${{env.VERSION}}.jar'
      - name: 'Build Native Image'
        shell: cmd
        env:
          JAVA_HOME: ./graalvm-ce-java17-21.3.0
        run: |
          call 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat'
          ./graalvm-ce-java11-20.1.0/bin/native-image --no-server --no-fallback -H:ReflectionConfigurationResources=reflection-config.json -jar load-${{env.VERSION}}.jar
      - name: 'Get Release URL'
        if: contains(github.event.head_commit.message, 'v')
        uses: actions/download-artifact@v2.1.0
        with:
          name: 'upload_url.txt'
      - name: 'Get Upload URL'
        if: contains(github.event.head_commit.message, 'v')
        run: |
          echo 'UPLOAD_URL=$(cat upload_url.txt)' >> $GITHUB_ENV
        shell: bash
      - name: 'Publish Windows Image'
        if: success()
        uses: actions/upload-artifact@v2.3.1
        with:
          name: 'load-${{env.VERSION}}-windows_x64.exe'
          path: 'load-${{env.VERSION}}.exe'
      - name: 'Release Windows Image Asset'
        if: success() && contains(github.event.head_commit.message, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'load-${{env.VERSION}}-windows_x64.exe'
          asser_path: 'load-${{env.VERSION}}.exe'
          asset_content_type: application/octet-stream
